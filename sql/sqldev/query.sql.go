// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqldev

import (
	"context"
	"database/sql"
)

const insertAvailability = `-- name: InsertAvailability :one





INSERT INTO availability (
    id_professional,
    init_datetime,
    end_datetime,
    init_hour,
    end_hour,
    type_availability,
    weekday_name,
    interval
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id_availability, id_professional, init_datetime, end_datetime, init_hour, end_hour, type_availability, weekday_name, interval
`

type InsertAvailabilityParams struct {
	IDProfessional   int64
	InitDatetime     string
	EndDatetime      string
	InitHour         string
	EndHour          string
	TypeAvailability sql.NullInt64
	WeekdayName      string
	Interval         int64
}

// -- name: GetAuthor :one
// SELECT * FROM authors
// WHERE id = ? LIMIT 1;
// -- name: ListAuthors :many
// SELECT * FROM authors
// ORDER BY name;
// -- name: CreateAuthor :one
// INSERT INTO authors (
//
//	name, bio
//
// ) VALUES (
//
//	?, ?
//
// )
// RETURNING *;
// -- name: UpdateAuthor :exec
// UPDATE authors
// set name = ?,
// bio = ?
// WHERE id = ?;
// -- name: DeleteAuthor :exec
// DELETE FROM authors
// WHERE id = ?;
func (q *Queries) InsertAvailability(ctx context.Context, arg InsertAvailabilityParams) (Availability, error) {
	row := q.db.QueryRowContext(ctx, insertAvailability,
		arg.IDProfessional,
		arg.InitDatetime,
		arg.EndDatetime,
		arg.InitHour,
		arg.EndHour,
		arg.TypeAvailability,
		arg.WeekdayName,
		arg.Interval,
	)
	var i Availability
	err := row.Scan(
		&i.IDAvailability,
		&i.IDProfessional,
		&i.InitDatetime,
		&i.EndDatetime,
		&i.InitHour,
		&i.EndHour,
		&i.TypeAvailability,
		&i.WeekdayName,
		&i.Interval,
	)
	return i, err
}
